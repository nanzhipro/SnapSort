---
description: 
globs: 
alwaysApply: false
---
# 组件化设计规范

本文档旨在为 iOS 和 macOS 应用开发（基于 Swift 与 SwiftUI 构建）提供一份详尽的组件化设计规范，并确保各模块具有高内聚、低耦合、可复用和高扩展性。

## 1. 总体设计原则

- **明确的职责划分**

  - 每个组件应仅负责其单一功能，避免将多个职责混合。
  - 通过单一职责原则为每个组件设定清晰的边界。

- **高内聚低耦合**

  - 模块内部功能紧密相关，且对外仅暴露必要的接口。
  - 模块间通过接口（协议）进行交互，避免直接依赖具体实现。

- **复用与扩展**

  - 所有组件应设计为可在其他应用中复用，并预留扩展接口。
  - 风险控制上，尽量降低未来更改某个模块时对整体系统的影响。

- **面向协议编程**
  - 优先定义组件模块协议，通过协议来定义行为和数据交互。
  - 实现类、结构体等应依照协议进行实现，并导出必要公共接口。

## 2. 命名规则与编码风格

- **遵循 Apple 官方命名规则**

  - 函数、方法、变量的命名应表达明确，做到“代码就是注释”。
  - 方法名以及属性名应使用驼峰命名法，并符合苹果设计指南的表达方式。

- **表达性**
  - 所有的命名都应尽可能准确描述其职责和行为。
  - 适当使用上下文信息，确保模块职责清晰。

## 3. 模块抽象与接口设计

- **定义公共协议**

  - 每个组件模块应先抽象出一个或多个对应协议，用于定义模块对外的行为和接口。
  - 协议应保持简单、明确，避免引入不必要的复杂性。

- **依赖注入与接口驱动**

  - 模块间的交互应通过依赖注入（DI）的方式进行通信。
  - 每个模块均应依赖于协议或抽象接口，而非具体类，以保证高度独立。

- **接口文档化**
  - 对外接口的文档、注释必须齐全，便于其他团队成员理解和调用模块功能。

## 4. 访问控制策略

- **严格访问控制**

  - 只有需要供外部调用的接口、类型（类、结构体、枚举等）才使用 `public` 修饰符。
  - 内部实现细节应使用 `internal` 或 `private` 限制访问，防止模块内部逻辑透漏。

- **封装与信息隐藏**
  - 组件内部的实现数据尽量不暴露，确保接口使用者不需要了解内部实现细节。
  - 避免跨模块直接访问数据成员，应通过方法或接口实现数据交互。

## 5. SwiftUI 组件设计

- **声明式设计**

  - 使用 SwiftUI 时，将 UI 逻辑声明化，确保视图与状态分离。
  - 利用 `@State`、`@Binding`、`@ObservedObject` 和 `@Environment` 等属性 wrappers 实现状态管理。

- **UI 组件的复用**
  - 设计 UI 组件时，尽量将视图逻辑和业务逻辑分离，便于在不同场景中复用。
  - 确保视图组件模块化，易于组合和嵌套，以满足复杂 UI 需求。

## 6. 模块间交互逻辑

- **明确定义交互协议**

  - 模块之间的交互应明确通过协议进行描述，订制好入参、返回值和回调方式。
  - 避免隐式依赖，确保每个组件的接口独立且容易维护。

- **事件驱动与消息传递**
  - 若业务场景需要，采用事件驱动或 Publisher-Subscriber（发布-订阅）模式实现组件间信息传递。
  - 保证跨模块通信过程中不会出现不必要的回调嵌套和耦合。

## 7. 综合考虑

- **单元测试与持续集成**

  - 每个组件应单独编写单元测试验证正确性，确保模块解耦后依然可靠。
  - 与持续集成系统（CI）结合，自动检测组件间依赖与交互逻辑的正确性。

- **文档与代码注释**
  - 除了代码内的命名自解释外，建议每个模块编写独立的设计和使用文档，便于快速理解。
  - 更新规范文档时与代码同步维护，确保一致性。
